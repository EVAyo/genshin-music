/* eslint-disable no-restricted-globals */
/// <reference lib="webworker" />
// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.
import { clientsClaim } from 'workbox-core';
import { registerRoute } from 'workbox-routing';
import { CacheFirst } from 'workbox-strategies';
const APP_NAME = process.env.NEXT_PUBLIC_APP_NAME
const CACHE = `${APP_NAME}-${process.env.NEXT_PUBLIC_SW_VERSION}`
const IS_TAURI = process.env.NEXT_PUBLIC_IS_TAURI === 'true'
console.log(CACHE)
declare var self: ServiceWorkerGlobalScope
clientsClaim();
//@ts-ignore
const PRECACHE_MANIFEST = self.__WB_MANIFEST
if (IS_TAURI) {

} else {
	// Precache all of the assets generated by your build process.
	// Their URLs are injected into the manifest variable below.
	// This variable must be present somewhere in your service worker file,
	// even if you decide not to use precaching. See https://cra.link/PWA
	//precacheAndRoute(PRECACHE_MANIFEST);
	console.log("registering routes")
	registerRoute(
		new RegExp('/*'),
		new CacheFirst({
			cacheName: CACHE
		})
	);
}

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
	if (event.data && event.data.type === 'SKIP_WAITING') {
		self.skipWaiting();
	}
});

self.addEventListener('activate', (evt) => {
	console.log('[ServiceWorker] Activate');
	//Remove previous cached data from disk.
	evt.waitUntil(
		caches.keys().then(async (keyList) => {
			const promises = await Promise.all(keyList.map((key) => {
				if(!APP_NAME) return console.error("APP_NAME is not defined")
				if ((key.includes(APP_NAME) && key !== CACHE)) {
					console.log('[ServiceWorker] Removing old cache', key);
					return caches.delete(key)
				}
				//@ts-ignore
				return new Promise(resolve => resolve())
			}));
			return promises
		})
	);
	self.clients.claim();
});